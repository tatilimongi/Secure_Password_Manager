import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useAuth } from '../contexts/AuthContext';
import { useToast } from '../contexts/ToastContext';
import { 
  ShieldCheckIcon, 
  EyeIcon, 
  EyeSlashIcon, 
  LockClosedIcon,
  KeyIcon,
  QrCodeIcon,
  CheckCircleIcon 
} from '@heroicons/react/24/outline';

const SetupPage: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [masterPassword, setMasterPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [totpSecret, setTotpSecret] = useState('');
  const [totpCode, setTotpCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const { setupMasterPassword, setup2FA } = useAuth();
  const { error, success } = useToast();
  const navigate = useNavigate();

  // Mock TOTP secret generation
  const generateTotpSecret = () => {
    const secret = 'JBSWY3DPEHPK3PXP'; // This would be generated by backend
    setTotpSecret(secret);
    return `otpauth://totp/SecureVault:user@example.com?secret=${secret}&issuer=SecureVault`;
  };

  const handleMasterPasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (masterPassword !== confirmPassword) {
      error('Passwords do not match');
      return;
    }

    if (masterPassword.length < 12) {
      error('Master password must be at least 12 characters long');
      return;
    }

    setIsLoading(true);
    try {
      const success_result = await setupMasterPassword(masterPassword);
      if (success_result) {
        success('Master password set successfully!');
        setCurrentStep(2);
        generateTotpSecret();
      } else {
        error('Failed to set master password. Please try again.');
      }
    } catch (err) {
      error('An error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handle2FASubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (totpCode.length !== 6) {
      error('Please enter a valid 6-digit code');
      return;
    }

    setIsLoading(true);
    try {
      const success_result = await setup2FA(totpSecret);
      if (success_result) {
        success('Two-factor authentication enabled successfully!');
        navigate('/dashboard');
      } else {
        error('Invalid verification code. Please try again.');
      }
    } catch (err) {
      error('An error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const skipTwoFactor = () => {
    navigate('/dashboard');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-dark-950 px-4">
      <div className="absolute inset-0 bg-gradient-to-br from-primary-900/20 to-accent-blue/20"></div>
      <div className="pattern-bg absolute inset-0 opacity-10"></div>
      
      <motion.div
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="glass-effect-dark p-8 rounded-2xl max-w-lg w-full relative z-10"
      >
        {/* Header */}
        <div className="text-center mb-8">
          <div className="bg-gradient-to-br from-primary-500 to-accent-blue p-3 rounded-xl w-fit mx-auto mb-4">
            <ShieldCheckIcon className="h-8 w-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-white mb-2">Secure Your Vault</h1>
          <p className="text-gray-300">Let's set up your security preferences</p>
        </div>

        {/* Progress Indicator */}
        <div className="flex items-center justify-center mb-8">
          <div className="flex items-center space-x-4">
            <div className={`flex items-center justify-center w-8 h-8 rounded-full ${
              currentStep >= 1 ? 'bg-primary-500 text-white' : 'bg-gray-600 text-gray-400'
            }`}>
              {currentStep > 1 ? <CheckCircleIcon className="h-5 w-5" /> : '1'}
            </div>
            <div className={`w-12 h-1 ${currentStep >= 2 ? 'bg-primary-500' : 'bg-gray-600'}`}></div>
            <div className={`flex items-center justify-center w-8 h-8 rounded-full ${
              currentStep >= 2 ? 'bg-primary-500 text-white' : 'bg-gray-600 text-gray-400'
            }`}>
              2
            </div>
          </div>
        </div>

        {/* Step 1: Master Password */}
        {currentStep === 1 && (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.4 }}
          >
            <div className="text-center mb-6">
              <LockClosedIcon className="h-12 w-12 text-primary-400 mx-auto mb-4" />
              <h2 className="text-2xl font-semibold text-white mb-2">Create Master Password</h2>
              <p className="text-gray-300">This password will protect all your stored credentials</p>
            </div>

            <form onSubmit={handleMasterPasswordSubmit} className="space-y-6">
              <div>
                <label htmlFor="masterPassword" className="block text-sm font-medium text-gray-300 mb-2">
                  Master Password
                </label>
                <div className="relative">
                  <LockClosedIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    type={showPassword ? 'text' : 'password'}
                    id="masterPassword"
                    value={masterPassword}
                    onChange={(e) => setMasterPassword(e.target.value)}
                    className="input-field w-full pl-10 pr-10"
                    placeholder="Create a strong master password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
                  >
                    {showPassword ? <EyeSlashIcon className="h-5 w-5" /> : <EyeIcon className="h-5 w-5" />}
                  </button>
                </div>
              </div>

              <div>
                <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-300 mb-2">
                  Confirm Master Password
                </label>
                <div className="relative">
                  <LockClosedIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    type={showConfirmPassword ? 'text' : 'password'}
                    id="confirmPassword"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className="input-field w-full pl-10 pr-10"
                    placeholder="Confirm your master password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
                  >
                    {showConfirmPassword ? <EyeSlashIcon className="h-5 w-5" /> : <EyeIcon className="h-5 w-5" />}
                  </button>
                </div>
              </div>

              <div className="bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-4">
                <h3 className="text-yellow-400 font-medium mb-2">Important:</h3>
                <ul className="text-sm text-gray-300 space-y-1">
                  <li>• Make it at least 12 characters long</li>
                  <li>• Use a mix of letters, numbers, and symbols</li>
                  <li>• Don't use personal information</li>
                  <li>• Store it securely - we cannot recover it</li>
                </ul>
              </div>

              <button
                type="submit"
                disabled={isLoading}
                className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    Setting up...
                  </div>
                ) : (
                  'Set Master Password'
                )}
              </button>
            </form>
          </motion.div>
        )}

        {/* Step 2: Two-Factor Authentication */}
        {currentStep === 2 && (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.4 }}
          >
            <div className="text-center mb-6">
              <KeyIcon className="h-12 w-12 text-primary-400 mx-auto mb-4" />
              <h2 className="text-2xl font-semibold text-white mb-2">Enable Two-Factor Authentication</h2>
              <p className="text-gray-300">Add an extra layer of security to your account</p>
            </div>

            <div className="space-y-6">
              {/* QR Code Section */}
              <div className="glass-effect p-6 rounded-xl text-center">
                <QrCodeIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-300 mb-4">Scan this QR code with your authenticator app:</p>
                <div className="bg-white p-4 rounded-lg inline-block">
                  <p className="text-black text-xs">QR Code would appear here</p>
                  <p className="text-black text-xs font-mono">{totpSecret}</p>
                </div>
                <p className="text-xs text-gray-400 mt-4">
                  Or manually enter this secret in your app: <code className="bg-gray-800 px-2 py-1 rounded">{totpSecret}</code>
                </p>
              </div>

              {/* Verification Form */}
              <form onSubmit={handle2FASubmit} className="space-y-4">
                <div>
                  <label htmlFor="totpCode" className="block text-sm font-medium text-gray-300 mb-2">
                    Enter 6-digit code from your app
                  </label>
                  <input
                    type="text"
                    id="totpCode"
                    value={totpCode}
                    onChange={(e) => setTotpCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                    className="input-field w-full text-center text-2xl tracking-widest"
                    placeholder="000000"
                    maxLength={6}
                    required
                  />
                </div>

                <button
                  type="submit"
                  disabled={isLoading || totpCode.length !== 6}
                  className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isLoading ? (
                    <div className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                      Verifying...
                    </div>
                  ) : (
                    'Enable 2FA'
                  )}
                </button>
              </form>

              <div className="text-center">
                <button
                  onClick={skipTwoFactor}
                  className="text-gray-400 hover:text-white transition-colors text-sm"
                >
                  Skip for now (Not recommended)
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </motion.div>
    </div>
  );
};

export default SetupPage;